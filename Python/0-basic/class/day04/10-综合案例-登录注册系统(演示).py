+"""
登录注册系统
"""
"""
数据存储的分析：
1）如何保存单个注册用户的信息？字典：存储用户名和密码
    用户1：{'name': 'smart', 'pwd': '123456abc'}
    用户2：{'name': 'linda', 'pwd': '123*abc'}

2）如果保存多个注册用户的信息？列表：存储每个注册用户的信息（列表嵌套字典）
    # 列表嵌套字典：整体是一个列表，但是列表中的每个数据都是一个字典
    [{'name': 'smart', 'pwd': '123456abc'}, {'name': 'linda', 'pwd': '123*abc'}, ...]

案例功能的分析：
① 提示用户输入要进行的操作
② 如果输入1：用户注册
③ 如果输入2：用户登录
④ 如果输入3：退出程序
⑤ 如果输入其他：提示输入有误！请重新输入！
"""
# 先定义一个列表：user_list，来保存注册用户的信息，假设现在已经有两个注册用户了
user_list = [{'name': 'smart', 'pwd': '123456abc'}, {'name': 'linda', 'pwd': '123*abc'}]

# 先来实现咱们这个程序的整体框架
while True:
    # 为了方便观察注册用户的数据，每次循环开始，先打印一个 user_list
    print(user_list)

    # ① 提示用户输入要进行的操作
    cmd_num = input('请输入操作: 1.用户注册/ 2.用户登录/ 3.退出程序：') # str
    # print(type(cmd_num), cmd_num)

    # ② 根据用户的输入，判断用户要进行什么操作
    if cmd_num == '1':
        # print('用户注册')
        # # 用户注册的基本功能实现
        # # ① 提示用户输入注册的用户名和密码
        # _name = input('请输入注册的用户名：')
        # _pwd = input('请输入注册的密码：')
        #
        # # ② 将注册的用户名和密码保存到一个字典中，然后将这个字典添加到保存用户数据的列表中
        # # 字典的格式：{'name': 用户名, 'pwd': 密码}
        # user_dict = {'name': _name, 'pwd': _pwd}
        # user_list.append(user_dict)

        # 用户注册功能的完善：实现注册用户信息时，用户名不允许重复
        # ① 提示用户输入注册的用户名
        _name = input('请输入注册的用户名：') # linda

        # ② 根据输入的用户名，判断已注册的用户中，用户名和新注册的用户名是否存在相同
        # 遍历 user_list，取出它里面每个字典，再从字典中根据key获取用户名，然后和新的用户名进行比对
        for user_dict in user_list:
            if user_dict['name'] == _name:
                # 如果存在相同，说明用户已经存在！不允许注册！
                print('用户已存在！不允许重复注册！')
                # 如果已经找到同名的用户，for循环就不需要再向后遍历了，直接使用break把for循环结束
                break
        else:
            # 注意：只要能执行for循环的这个else里面的代码，就说明不存在相同的用户名
            # 如果不存在相同，则说明这个新注册的用户名可以使用，那么可以提示用户输入注册的密码，然后再保存注册用户的信息
            # 提示用户输入注册的密码
            _pwd = input('请输入密码：')

            # 将注册的用户名和密码保存到一个字典中，然后将这个字典添加到保存用户数据的列表中
            # 字典的格式：{'name': 用户名, 'pwd': 密码}
            user_dict = {'name': _name, 'pwd': _pwd}
            user_list.append(user_dict)
    elif cmd_num == '2':
        # print('用户登录')
        # ① 提示用户输入登录的用户名和密码
        _name = input('请输入登录的用户名：')
        _pwd = input('请输入登录的密码：')

        # ② 判断登录的用户名和密码，和已注册的用户名和密码有没有完全一致的
        # 遍历 user_list，获取每个注册用户的字典数据，并从字典中取出用户名和密码，然后和登录的用户名和密码进行比对
        for user_dict in user_list:
            if user_dict['name'] == _name and user_dict['pwd'] == _pwd:
                # 如果有完全一致的，就说明用户名和密码正确，提示：登录成功！
                print('登录成功！')
                # 如果有完全一致的，for循环不需要继续向后遍历了，直接break把for循序结束
                break
        else:
            # 只要能执行for循环的else里面的代码，就说明用户名和密码没有和登录用户名密码完全一致
            # 如果没有完全一致的，就说明用户名或密码错误，提示：用户名或密码错误！重新登录！
            print('用户名或密码错误！重新登录！')

    elif cmd_num == '3':
        print('退出程序')
        # 结束 while 循环
        break
    else:
        print('输入有误！请重新输入！')



