"""
异常传递：
学习目标：了解未处理异常会向外自动传递的特点
"""

"""
异常传递：编写代码时，如果内层代码没有处理出现的异常，异常会向外层传递
"""

"""
异常嵌套
"""
print('************************* 示例1 *************************')

try:
    f = open('yyy.txt', 'w')

    # 内部语句执行完，才向外部传递异常
    try:
        # 前面只写方式打开文件，不能读文件，产生异常
        # 内部没有捕获处理异常
        ret = f.read()
        print(ret)
    finally:
        print('关闭文件')
        f.close()

except Exception as e:
    print('外层捕获异常：', e)


"""
函数嵌套：内部函数出现异常未处理时，会向外部函数层层传递
"""

print('************************* 示例2 *************************')


# 定义1个函数，函数内部发生了异常 test01()，没有捕获处理
def test01():
    print('开始执行test0111111')
    print(num)
    print('结束执行test0111111')


# 定义另外一个函数 test02, 在函数内部调用test01
def test02():
    print('开始执行test02222222')
    test01()
    print('结束执行test02222222')


# 定义一个test03函数，函数内部调用test01，但是对test01做异常处理
def test03():
    print('开始执行test0333333')

    try:
        test01()
    except Exception as e:
        print('外层函数捕获异常：', e)

    print('结束执行test0333333')


# 调用test02()
# test02() # 打开注释看看效果

# 调用test03
test03() # 打开注释看看效果
