"""
切片：slice，截取一部分
切片 使用 索引值 来限定范围，根据 步长 从原序列中 取出一部分 元素组成新序列
切片 方法适用于 字符串、列表、元组
字符串[开始索引:结束索引:步长]
"""
"""
截取从 b ~ e 位置 的字符串
截取从 b ~ 末尾 的字符串
截取从 开始 ~ e 位置 的字符串
从开始位置，每隔一个字符截取字符串
截取字符串末尾两个字符
字符串的逆序（面试题）
"""
#         01234567
my_str = 'abcdefgh'

# 1）截取从 b ~ e 位置 的字符串
# 注意：截取字符串，包含开始索引，不包含结束索引
print(my_str[1:5])
# print(my_str[1:4])

# 步长：表示从字符串中截取了一个字符之后，下一个字符截取谁，
# 需要使用前一个字符的索引加上步长，来确定下一个要截取的字符
# 1 -> 'b'
# 2 -> 'c'
# 3 -> 'd'
# 4 -> 'e'
# 5 -> 超出了截取的范围，切片就结束了
print(my_str[1:5:1])

# 思考题：如果要从 my_str 中截取出 'aceg'
# 0 -> 'a'
# 2 -> 'c'
# 4 -> 'e'
# 6 -> 'g'
# 8 -> 超出了截取的范围，切片就结束了
print(my_str[0:7:2])

# 2）截取从 b ~ 末尾 的字符串
print(my_str[1:8])
# 注意点1：进行切片时，如果是要截取到末尾，结束索引可以省略
print(my_str[1:])

# 3）截取从 开始 ~ e 位置 的字符串
print(my_str[0:5])
# 注意点2：进行切片时，如果是从开始往后截取，开始索引可以省略
print(my_str[:5])

# 4）从开始位置，每隔一个字符截取字符串
print(my_str[::2])

# 5）截取字符串末尾两个字符
print(my_str[6:])
# 注意点3：进行切片时，起始索引和结束索引可以使用正数，也可以使用负数
print(my_str[-2:])

# 6）字符串的逆序（面试题）
# abcdefgh
# hgfedcba

my_str = 'abcdefgh'

# 注意点4：进行切片时，步长可以为正数，也可为负数；
# 如果步长为正数，表示按照从左到右的方向截取字符
# 如果步长为负数，表示按照从右到左的方法截取字符
# -1 -> 'h'
# -2 -> 'g'
# -3 -> 'f'
# -4 -> 'e'
# -5 -> 'd'
# -6 -> 'c'
# -7 -> 'b'
# -8 -> 'a'
# -9 -> 超出了截取的范围，切片就结束了
# print(my_str[-1:-9:-1])

# -(len(my_str) + 1)
print(my_str[-1:-(len(my_str) + 1):-1])
# 注意点5：当步长为负数时，如果省略了起始索引和结束索引，起始索引默认为：-1，结束索引默认为：-(len(my_str) + 1)
print(my_str[::-1])


# 思考下面的几个切片代码的结果？？？
res = my_str[1:-2:1]
print(res) # 'bcdef'

res = my_str[-6:6:-1]
print(res) # ''

res = my_str[-6:6:1]
print(res) # 'cdef'

# 切片的时候，两个冒号是否可以省略？
# 第一个冒号永远不能省略；
# 第二个冒号，当步长省略时，第二个冒号可以省略；


print(my_str[-2:-7:1]) # ''
print(my_str[-2:-7:-1]) # 'gfedc'



















