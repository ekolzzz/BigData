"""
在调用函数时，给形参传递实参有如下2种方式：
位置参数(位置实参)：函数调用时，按形参的位置，从左到右，依次传递实参，缺一不可，不需要指定形参名称
关键字参数(关键字实参)：函数调用时，按照`形参名=值`的形式来传递实参，不必按照位置传递
    注意：对于同一形参不能重复传值
"""


def func1(num1, num2):
    print('num1=', num1)
    print('num2=', num2)


# 位置实参：传递实参时不需要指定形参的名称，按照形参的顺序传递
func1(1, 3)

# 关键字实参：传递实参时需要指定形参的名称，按照`形参名=值`的形式传递实参，可以不按照形参的顺序
func1(num1=2, num2=4)
func1(num2=3, num1=2)

print('==========================================')

"""
在函数定义时，函数的形参有如下4个分类：
* 普通形参：函数定义时，只要形参名称，调用函数时，普通形参必须传递实参
* 缺省形参：函数定义时，形参带有默认值，调用函数时，可以传实参，也可以不传实参，不传实参则会使用默认值
* 不定长形参：可以接收任意数量的实参
    * 元组不定长形参：用于接收任意数量的位置实参
    * 字典不定长形参：用于接收任意数量的关键字实参
"""


# a：普通形参
# b和c：缺省形参
# 注意：函数定义时，普通形参必须在缺失形参的前面
def func2(a, b=2, c=3):
    print('a=', a)
    print('b=', b)
    print('c=', c)


func2(1) # a=1, b=2, c=3
func2(1, 10) # a=1, b=10, c=3
func2(1, 10, 20) # a=1, b=10, c=20

print('==========================================')

"""
不定长参数(可以接收任意数量实参的形参)：接收任意数量的实参
1）元组不定长参数：用于接收任意数量的位置实参
2）字典不定长参数：用于接收任意数量的关键字实参
"""
# a = 1
# b = 2
# c = 3
# d = 4
# print(a, b, c, d)


# 元组不定长形参：用于接收任意数量的位置实参
def func3(*args):
    print(type(args), args)


# func3()
# func3(1)
# func3(1, 2)
# 本质：将任意数量的位置实参先打包成一个元祖，再把元祖传递给元组不定长形参
# 我们这里就是把1,2,3打包成了元祖(1, 2, 3)，然后把元祖(1, 2, 3)给了args这个元组不定长形参
func3(1, 2, 3)


# 需求：编写一个函数，可以计算任意多个数字的和
def my_sum(*args):
    res = 0

    for i in args:
        res += i

    return res


result = my_sum(1, 3, 5, 8, 9)
print(result)

print('==========================================')


# 字典不定长形参：接收任意数量的关键字实参
def func5(**kwargs):
    print(type(kwargs), kwargs)


# func5()
# func5(name='smart')
# func5(name='smart', age=18)
# 本质：将任意数量的关键字实参先打包成一个字典，再把字典传递给字典不定长形参
# 下面的代码就是先将：name='smart', age=18, gender=False 这三个关键字实参打包成
# 一个字典：{'name': 'smart', 'age': 18, 'gender': False}，然后把字典赋值给 kwargs 字典不定长形参
func5(name='smart', age=18, gender=False)

"""
函数调用实参传递的形式：
1）位置传递
2）关键字传递

函数形参的综合应用：
1）普通参数：必传的
2）缺省参数：带有默认值，可以不传，不传会使用默认值
3）元组不定长参数：接收任意数量的位置实参
4）字典不定长参数：接收任意数量的关键字实参

注意：多种类型参数需要注意次序
1）普通参数，元组不定长参数，缺省参数，字典不定长参数
"""

print('=====================================')


def func6(a, *args, name='smart', **kwargs):
    print(a) # 1
    print(args) # (2, 3, 4)
    print(name) # 'linda'
    print(kwargs) # {'age': 16, 'gender': False}


func6(1, 2, 3, 4, name='linda', age=16, gender=False)

print('-----------')
# a：1
# args：()
# name：'smart'
# kwargs：{'age': 16, 'gender': False}
func6(1, age=16, gender=False)


