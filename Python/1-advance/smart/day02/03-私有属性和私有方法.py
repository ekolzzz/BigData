"""
私有属性和私有方法
学习目标：知道私有属性和私有方法无法在类定义外部直接通过对象访问
"""

"""
面向对象三大特点：

1）封装【重点】
    a）将属性和方法放到一起封装成一个整体，然后通过实例化对象来使用
    b）对属性和方法增加访问权限控制

2）继承【重点】
    a）继承的语法：单继承、多继承
    b）重写：子类重写从父类继承的方法
    c）子类调用父类中的方法：三种方式

3）多态【初步理解】
"""

"""
私有属性和私有方法 对应的是 公开属性和公开方法

在进行类的定义时，以 __ 开头的属性称为私有属性，以 __ 开头的方法称为私有方法

私有属性：
    不能在类定义外部直接通过`对象.属性名`的形式访问，只能在类内部定义的方法中进行访问

私有方法：
    不能在类定义外部直接通过`对象.方法名(...)`的形式调用，只能在类内部定义的方法中进行调用
"""


class Dog(object):
    """狗类"""
    def __init__(self, _name, _age):
        # name 这个属性是一个公开属性
        self.name = _name
        # __age 这个属性就是一个私有属性了
        self.__age = _age

    def show_info(self):
        print(f'狗的名字：{self.name}，年龄：{self.__age}')

    # __pee 这个方法就是一个私有方法了
    def __pee(self):
        print('上厕所嘘嘘zzz')

    def sleep(self):
        self.__pee()
        print('睡觉觉')


# 创建一个 Dog 类的实例对象
dog1 = Dog('小黑', 2)
# 公开属性可以在类定义的外部通过`对象.属性名`来访问
# print(dog1.name)
# 私有属性不能在类定义的外部通过`对象.属性名`来访问，但是私有属性可以在类定义的方法内部可以访问
# print(dog1.__age) # 这句代码会出错
dog1.show_info()

# 私有方法不能在类定义的外部通过`对象.方法名(...)`来调用，但是私有方法在类定义的方法内容可以调用
# dog1.__pee() # 这句代码也会出错
dog1.sleep()


"""
私有属性的访问和设置【推荐】：
1）私有属性的目的是为了限制在类的外部直接访问私有属性，增加访问限制
2）如果想在类的外部进行私有属性的访问和设置，可以提供专门的方法进行私有属性的设置和访问，好处是可以增加一下设置和访问的限制
"""

# 注意：公开属性可以在类定义的外部随意通过`对象.属性名`的形式进行访问或设置，尤其是设置的时候，可以出现设置一个不合法的数据！
# 如果相对对象的属性进行访问权限的控制，就是使用私有属性！！！


class Dog(object):
    """狗类"""
    def __init__(self, _name, _age):
        self.name = _name
        self.__age = _age

    # 需求：希望在类定义的外部获取狗的年龄
    def get_age(self):
        """返回狗的年龄"""
        return self.__age

    # 需求：希望在类定义的外部进行狗的年龄设置，要求非法的年龄不能设置！！！
    def set_age(self, _age):
        """设置狗的年龄"""
        # 增加权限控制
        if _age <= 0:
            print('年龄设置非法！')
            return

        self.__age = _age


# # 创建一个 Dog 类的实例对象
# dog1 = Dog('小黑', 2)
# # print(dog1.__age)
# res = dog1.get_age()
# print(res)
#
# dog1.set_age(3)
# res = dog1.get_age()
# print(res)
#
# dog1.set_age(-1)
# res = dog1.get_age()
# print(res)

"""
注意：在 python 中类定义时，没有绝对的私有属性和私有方法，严格来说，python类所有的东西都是公开的！！！

类定义时私有属性/私有方法的本质【扩展了解】：
1）python解释器将私有属性名/私有方法名进行的转换，转换的格式为：`_类名__属性名` 或 `_类名__方法名`
2）在类的外部直接通过原私有属性名/私有方法名是访问不到的，但是通过转换后的名称可以进行访问【不推荐】

注意：虽然使用 python 解释器更改之后的名称可以直接在类定义外部来访问私有属性和私有方法，但是不要这样干，
因为如果这样做，其实就违背了私有属性和私有方法设计的初衷了。
"""


class Dog(object):
    def __init__(self, _name, _age):
        self.name = _name
        # 私有属性
        self.__age = _age # 本质：__age 这个属性名其实被 python 解释器改成了：_Dog__age

    # 私有方法
    def __pee(self): # 本质：__pee 这个方法名其实被 python 解释器改成了：_Dog__pee
        print('上厕所嘘嘘')


# 创建一个 Dog 类的实例对象
dog1 = Dog('小黑', 2)
# print(dog1.__age)
print(dog1._Dog__age)

# dog1.__pee()
dog1._Dog__pee()
