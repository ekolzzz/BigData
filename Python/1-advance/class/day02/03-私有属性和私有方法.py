"""
私有属性和私有方法
学习目标：知道私有属性和私有方法无法在类定义外部直接通过对象访问
"""

"""
面向对象三大特点：

1）封装【重点】
    a）将属性和方法放到一起封装成一个整体，然后通过实例化对象来使用
    b）对属性和方法增加访问权限控制

2）继承
3）多态
"""

"""
在进行类的定义时，以 __ 开头的属性称为私有属性，以 __ 开头的方法称为私有方法

私有属性：
    不能在类定义外部直接通过`对象.属性名`的形式访问，只能在类内部定义的方法中进行访问

私有方法：
    不能在类定义外部直接通过`对象.方法名(...)`的形式调用，只能在类内部定义的方法中进行调用
"""



"""
私有属性的访问和设置【推荐】：
1）私有属性的目的是为了限制在类的外部直接访问私有属性，增加访问限制
2）如果想在类的外部进行私有属性的访问和设置，可以提供专门的方法进行私有属性的设置和访问，好处是可以增加一下设置和访问的限制
"""
class Dog(object):
    """狗类"""
    def __init__(self, _name, _age):
        self.name = _name
        self.__age = _age # __age 是私有属性

    # 需求：希望在类定义的外部过去狗的年龄
    def get_age(self):
        """返回狗的年龄"""
        return self.__age

    # 需求：希望在类定义的外部进行狗的年龄设置，要求非法的年龄不能设置！！！
    def set_age(self, _age):
        """设置狗的年龄"""
        #增加权限控制
        if _age <= 0:
            print('年龄设置非法！')
            return

        self.__age = _age

# 创建一个 Dog 类的实例对象
dog1 = Dog('小黑', 2)
# print(dog1.__age)
res = dog1.get_age()
print(res)

dog1.set_age(3)
res = dog1.get_age()
print(res)

dog1.set_age(-1)
res = dog1.get_age()
print(res)

"""
类定义时私有属性/私有方法的本质【扩展了解】：
1）python解释器将私有属性名/私有方法名进行的转换，转换的格式为：`_类名__属性名` 或 `_类名__方法名`
2）在类的外部直接通过原私有属性名/私有方法名是访问不到的，但是通过转换后的名称可以进行访问【不推荐】
"""

